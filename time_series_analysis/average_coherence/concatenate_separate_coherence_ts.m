% This should match the name of the day directory.
day_label = 'Day1';

data_dir = [ ...
  '/mnt', ...
  '/nfs', ...
  '/clasnetappvm', ...
  '/students', ...
  '/ikhultman', ...
  '/Desktop', ...
  '/power_time_series_analysis', ...
  '/CGRP_power_time_series_analysis', ...
  '/coherence_ts_data240408'];

save_dir = [ ...
  '/mnt', ...
  '/nfs', ...
  '/clasnetappvm', ...
  '/students', ...
  '/ikhultman', ...
  '/Desktop', ...
  '/power_time_series_analysis', ...
  '/CGRP_power_time_series_analysis', ...
  '/concatenated_coherence_ts_data240408'];

exp_phases = { ...
  'B1', ...
  'PI1', ...
  'PI2'};

expected_noncoherence_colnames = { ...
  'mouse', ...
  'date', ...
  'freq_band', ...
  'Hz', ...
  'region_pair'};

if iscolumn(exp_phases)
  exp_phases = exp_phases'; 
end

if iscolumn(expected_noncoherence_colnames)
  expected_noncoherence_colnames = expected_noncoherence_colnames'; 
end

n_phases = length(exp_phases);

file_sep = '/';
if ispc
  file_sep = '\';
end

if data_dir(end) ~= file_sep
  data_dir = [data_dir, file_sep];
end

data_dir = [data_dir, day_label, file_sep];

assert(isfolder(data_dir) );

if save_dir(end) ~= file_sep
  save_dir = [save_dir, file_sep];
end

if ~isfolder(save_dir)
  mkdir(save_dir); 
end

save_filename = [ ...
  save_dir, ...
  day_label, ...
  '_coherence_fused_lasso_analysis.csv'];

coherence_filenames = ls_filenames_w_pattern( ...
  data_dir, ...
  '(?i)^mouse.*\.mat$');

n_fnames = numel(coherence_filenames);

n_coherence_vec_check = [];
all_combined_mean_coherence_ts_table = [];

for fx = 1:n_fnames
  next_filename = [data_dir, coherence_filenames{fx}];
  next_coherence_df = load(next_filename);
  next_coherence_df_vars = fieldnames(next_coherence_df);
  
  if iscolumn(next_coherence_df_vars)
    next_coherence_df_vars = next_coherence_df_vars';
  end
  
  assert(isempty(setdiff(exp_phases, next_coherence_df_vars) ));
  leftout_next_coh_df_vars = setdiff(next_coherence_df_vars, exp_phases);

  if ~isempty(leftout_next_coh_df_vars)
    warn_msg = [ ...
      'Leaving out the data for the following experimental phases:\n', ...
      repmat('%s\n', 1, numel(leftout_next_coh_df_vars) )];

    warning(warn_msg, leftout_next_coh_df_vars{:});
  end

  n_coherence_vec = cellfun( ...
    @(exp_phase) size(next_coherence_df.(exp_phase), 2), ...
    exp_phases) - ...
    numel(expected_noncoherence_colnames);

  if isempty(n_coherence_vec_check)
    n_coherence_vec_check = n_coherence_vec;
  else
    assert(all(n_coherence_vec == n_coherence_vec_check) );
  end

  exp_phase_col_ix_table = [ ...
    cumsum([1, n_coherence_vec(1:(end-1) )]);
    cumsum(n_coherence_vec)];

  n_tot_coherence = sum(n_coherence_vec);
  combined_ts_data = NaN( ...
    size(next_coherence_df.(exp_phases{1}), 1), ...
    n_tot_coherence);

  for px = 1:n_phases
    next_phase = exp_phases{px};
    next_tabl_colnames = next_coherence_df.(next_phase).Properties.VariableNames;
    [~, noncoh_col_ixs] = sort( ...
      intersect( ...
        next_tabl_colnames, ...
        expected_noncoherence_colnames) );
    
    for vx = 1:numel(expected_noncoherence_colnames)
      next_nonpow_var = expected_noncoherence_colnames{vx};

      if ( ...
        isa(next_coherence_df.(exp_phases{1}).(next_nonpow_var), 'string') || ...
        isa(next_coherence_df.(exp_phases{1}).(next_nonpow_var), 'cell') )
        assert( ...
          all( ...
            strcmp( ...
              next_coherence_df.(exp_phases{1}).(next_nonpow_var), ...
              next_coherence_df.(next_phase).(next_nonpow_var) )));
      else
        assert( ...
          all( ...
            next_coherence_df.(exp_phases{1}).(next_nonpow_var) == ...
            next_coherence_df.(next_phase).(next_nonpow_var) ));
      end
    end

    coh_col_ixs = sort( ...
      setdiff( ...
        1:size(next_coherence_df.(next_phase), 2), ...
        noncoh_col_ixs) );
  
    col_ax = exp_phase_col_ix_table(1,px);
    col_bx = exp_phase_col_ix_table(2,px);
    combined_ts_data(:,col_ax:col_bx) = table2array( ...
      next_coherence_df.(next_phase)(:,coh_col_ixs) );
  end
  
  next_tabl_colnames = next_coherence_df.(exp_phases{1}).Properties.VariableNames;
  [~, noncoh_col_ixs] = sort( ...
    intersect( ...
      next_tabl_colnames, ...
      expected_noncoherence_colnames) );

  noncoherence_table = next_coherence_df.(exp_phases{1})(:,noncoh_col_ixs);
  
  [grp_ixs, mouse_id, freq_band, region_pair] = findgroups( ...
    noncoherence_table.mouse, ...
    noncoherence_table.freq_band, ...
    noncoherence_table.region_pair);

  if isrow(grp_ixs)
    grp_ixs = grp_ixs';
  end
  
  if isrow(mouse_id)
    mouse_id = mouse_id';
  end

  if isrow(freq_band)
    freq_band = freq_band';
  end
  
  if isrow(region_pair)
    region_pair = region_pair'; 
  end

  group_mean_ts = array2table( ...
    splitapply( ...
      @(coh_mat) mean(coh_mat, 1, 'omitnan'), ...
      combined_ts_data, ...
      grp_ixs) );
  
  mean_coherence_ts_table = [ ...
    table(mouse_id, freq_band, region_pair), ...
    group_mean_ts];

  if isempty(all_combined_mean_coherence_ts_table)
    all_combined_mean_coherence_ts_table = mean_coherence_ts_table;
  else
    all_combined_mean_coherence_ts_table = [ ...
      all_combined_mean_coherence_ts_table;
      mean_coherence_ts_table];
  end
end

writetable(all_combined_mean_coherence_ts_table, save_filename);

